TODO:

(DONE) Schema check when parsing payload

Extended json storage (multidimension) 
 - Need to convert to JSON format while transmitting instead of array

Read from byte instead of line <- Use Tensor-like structure for that
 - Created to use only Byte offset, (DONE) 
 - TODO: Create a Data Structure to store byte offset (like strides)
 - TODO: If change/update data how would byte offsets be altered? *** Remove and Update data? byte offset (unless max amount of data stored per an item that works then except for delete/remove, can replace it so do not have to reformat otherwise becomes sparse non-optimized space storage??) 
  -- FINISHED the max payload size persisted in file
  -- TODO update command
  -- TODO remove command

Hashfunction for key to line number instead of just a map
    - Right now using in memory map for key of a particular table
    - Use a hash function if it is as performant (should be) without storage of data in map

Cache spacial locality along with temporal Cache (LRU)
    - On startup load meta data into memory, so dont have to change it

Python, Java, Rust, PHP, C# connections

gRPC added to server 

Performance improvements (make it faster - less I/O reads/writes, go routines/channels)

Horizontal scaling

Smart LRU cache (number of times its been hit rather than just whether its been used, maybe? )